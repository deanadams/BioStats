library(geomorph)
data(plethodon)
data("plethspecies")
plot(plethspecies$phy)
library(phytools)
phy <- collapse.to.star(phy = plethspecies$phy, node = 10)
phy <- collapse.to.star(plethspecies$phy, node = 10)
plot(phy)
plot(plethspecies$phy)
nodelabels()
phy <- collapse.to.star(plethspecies$phy, node = 16)
plot(phy)
physignal(plethspecies$land,phy)
dim(plethspecies$land)
plethspecies$land[1,,]
plethspecies$land[1,1,]
physignal(plethspecies$land[1,1,],phy)
devtools::install_github('geomorphR/geomorph', ref="Develop", build_vignettes = TRUE)
install.packages("C:/DeanData/Research/Programming/GeoMorphCode/CurrentBeta/Develop/geomorph_4.0.0.tar.gz", repos = NULL, type = "source")
devtools::install_github('geomorphR/geomorph', ref="Develop")
devtools::install_github('geomorphR/geomorph', ref="Develop")
devtools::install_github('geomorphR/geomorph', ref="Develop")
devtools::install_github('geomorphR/geomorph', ref="Develop", build_vignettes = TRUE)
library(geomorph)
?physignal
ata(plethspecies)
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
#Test for phylogenetic signal in shape
PS.shape <- physignal(A=Y.gpa$coords,phy=plethspecies$phy,iter=999)
summary(PS.shape)
plot(PS.shape)
plot(PS.shape$PACA, phylo = TRUE)
PS.shape$K.by.p # Phylogenetic signal profile
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
PS.shape <- physignal(A=Y.gpa$coords,phy=plethspecies$phy,iter=999)
PS.size <- physignal(A=Y.gpa$Csize,phy=plethspecies$phy,iter=999)
summary(PS.size)
plot(PS.size)
devtools::install_github('geomorphR/geomorph', ref="Develop")
library(geomorph)
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)
PS.shape <- physignal(A=Y.gpa$coords,phy=plethspecies$phy,iter=999)
devtools::install_github('geomorphR/geomorph', ref="Develop")
devtools::install_github('geomorphR/geomorph', ref="Develop")
library(geomorph)
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)
PS.shape <- physignal(A=Y.gpa$coords,phy=plethspecies$phy,iter=999)
PS.size <- physignal(A=Y.gpa$Csize,phy=plethspecies$phy,iter=999)
summary(PS.size)
plot(PS.size)
PS.size <- physignal(A=two.d.array(Y.gpa$Csize),phy=plethspecies$phy,iter=999)
PS.shape <- physignal(A=two.d.array(Y.gpa$coords),phy=plethspecies$phy,iter=999)
devtools::install_github('geomorphR/geomorph', ref="Develop")
library(geomorph)
load("C:/DeanData/Research/Programming/GeoMorphCode/Geomorph-Questions-Help/2021-03-Anc.BM-polyotomies/example.bin")
physignal(dt$sh, dt$phy)
physignal(dt$cs, dt$phy) # Doesn´t run because:
is.binary(dt$phy)
#now the geomorph examples
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
#Test for phylogenetic signal in shape
PS.shape <- physignal(A=Y.gpa$coords,phy=plethspecies$phy,iter=999)
summary(PS.shape)
plot(PS.shape)
plot(PS.shape$PACA, phylo = TRUE)
PS.shape$K.by.p # Phylogenetic signal profile
#Test for phylogenetic signal in size
PS.size <- physignal(A=Y.gpa$Csize,phy=plethspecies$phy,iter=999)
summary(PS.size)
physignal(A=Y.gpa$coords,phy=plethspecies$phy,iter=999)
devtools::install_github('geomorphR/geomorph', ref="Develop")
library(geomorph)
load("C:/DeanData/Research/Programming/GeoMorphCode/Geomorph-Questions-Help/2021-03-Anc.BM-polyotomies/example.bin")
physignal(dt$sh, dt$phy)
physignal(dt$cs, dt$phy) # Doesn´t run because:
#now the geomorph examples
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
#Test for phylogenetic signal in shape
PS.shape <- physignal(A=Y.gpa$coords,phy=plethspecies$phy,iter=999)
summary(PS.shape)
plot(PS.shape)
plot(PS.shape$PACA, phylo = TRUE)
PS.shape$K.by.p # Phylogenetic signal profile
#Test for phylogenetic signal in size
PS.size <- physignal(A=Y.gpa$Csize,phy=plethspecies$phy,iter=999)
summary(PS.size)
library(lmkchk)
library(lmkCHK)
install.packages('lmkCHK')
library(lmkCHK)
?lmkCHK
LMK_PCA_plot
9338*12
883+760
library(phytools)
?phytools
library(geomorph)
?gpagen
50/37
library(RRPP)
?trajectory.analysis
## Analysis of sexual dimorphism vectors (factorial approach)
data(Pupfish)
fit <- lm.rrpp(coords ~ Pop * Sex, data = Pupfish, iter = 199)
reveal.model.designs(fit)
TA <- trajectory.analysis(fit, groups = Pupfish$Pop,
traj.pts = Pupfish$Sex, print.progress = FALSE)
# Magnitude difference (absolute difference between path distances)
summary(TA, attribute = "MD")
# Correlations (angles) between trajectories
summary(TA, attribute = "TC", angle.type = "deg")
# No shape differences between vectors
summary(TA, attribute = "SD")
# Retain results
TA.summary <- summary(TA, attribute = "MD")
TA.summary$summary.table
# Plot results
TP <- plot(TA, pch = as.numeric(Pupfish$Pop) + 20, bg = as.numeric(Pupfish$Sex),
cex = 0.7, col = "gray")
add.trajectories(TP, traj.pch = c(21, 22), start.bg = 1, end.bg = 2)
legend("topright", levels(Pupfish$Pop), pch =  c(21, 22), pt.bg = 1)
### Analysis when data are already trajectories (motion paths)
# data are planar Cartesian coordinates (x, y) across 5 points (10 variables)
data(motionpaths)
fit <- lm.rrpp(trajectories ~ groups, data = motionpaths, iter = 199)
TA <- trajectory.analysis(fit, groups = motionpaths$groups, traj.pts = 5)
# Magnitude difference (absolute difference between path distances)
summary(TA, attribute = "MD")
# Correlations (angles) between trajectories
summary(TA, attribute = "TC", angle.type = "deg")
# Shape differences between trajectories
summary(TA, attribute = "SD")
TP <- plot(TA, pch = 21, bg = as.numeric(motionpaths$groups),
cex = 0.7, col = "gray")
add.trajectories(TP, traj.pch = 21, traj.bg = 1:4)
TP$pca$rotation
?dist
Y<-c(rep(1,39),rep(0,30))
Y
species.dist<-dist(species, method="binary")
Y.dist<-dist(Y, method="binary")
Y.dist
vegan:::vegdist
?vegan:::vegdist
data(sipoo)
data(vegan:::sipoo)
library(vegan)
data(sipoo)
View(sipoo)
Y.dist<-vegdist(sipoo, method="jaccard",binary=TRUE)
Y.dust
Y.dist
SMC = function(x, y) {
bt = binary_table(x, y)
return((bt[1, 1] + bt[2, 2])/sum(bt))
}
SMC(sipoo)
SMC(sipoo[,1:2])
SMC(as.binary_table(sipoo[,1:2]))
SMC(sipoo[,1],sipoo[,2]))
SMC(sipoo[,1],sipoo[,2])
hamming = function(x, y) {
return(sum(x != y))
}
library(ade4)
#Hamming distance
#sum of mismatched presence/absence (0/1 or 1/0)
dist.binary(sipoo,method = 1)
# Simple Matching Coefficient
# Shared presence and shared absence (as proportion of total)
dist.binary(sipoo,method = 2)
#Hamming distance
#sum of mismatched presence/absence (0/1 or 1/0)
dist.binary(sipoo,method = 2)*ncol(sipoo)
#Hamming distance
#sum of mismatched presence/absence (0/1 or 1/0)
ncol(sipoo) - dist.binary(sipoo,method = 2)*ncol(sipoo)
22275-9450
3200*1.15
3700*3.5
120000*6/9
12000-120000*6/9
120000-120000*6/9
693/4900
library(RRPP)
data("Pupfish")
anova(lm.rrpp(Pupfish$coords~Pupfish$Pop))
fit <- lm.rrpp(Pupfish$coords~Pupfish$Pop)
plot(fit,type = "PCA")
plot(fit,type = "PC")
plot(fit,type = "PC",predictor = Pupfish$Pop)
library(geomorph)
?lm.rrpp
?shape.predictor
lda.pupfish<-lda(Pupfish$coords,Pupfish$Pop)
library(MASS)
lda.pupfish<-lda(Pupfish$coords,Pupfish$Pop)
lda.pupfish<-vegan:::lda(Pupfish$coords,Pupfish$Pop)
lda.pupfish<-MASS:::lda(Pupfish$coords,Pupfish$Pop)
library(MASS)
?lda
lda.pupfish <- lda(Pupfish$coords,Pupfish$Pop)
Pupfish$coords
lda.pupfish <- lda(prcomp(Pupfish$coords)$x,Pupfish$Pop)
lda.pupfish <- lda(prcomp(Pupfish$coords)$x[,1:53],Pupfish$Pop)
cva.pupfish<-predict(lda.pupfish,Y)
cva.pupfish<-predict(lda.pupfish,prcomp(Pupfish$coords)$x[,1:53])
data(plethodon)
data("pupfish")
library(geomorph)
data("plethodon")
Y.gpa <- gpagen(plethodon$land)    #GPA-alignment
plot(gm.prcomp(Y.gpa$coords))
install.packages('geomorph')
library(geomorph)
data("plethodon")
library(MASS)
Y.gpa <- gpagen(plethodon$land)
gps <- intersect(plethodon$species, plethodon$site)
gps
gps <- interaction(plethodon$species, plethodon$site)
gps
gps <- gl(2,10)
gps
fit <- procD.lm(shape~gps)
shape <- Y.gpa$coords[,,21:40] #2 allopatric groups
gps <- gl(2,10)
fit <- procD.lm(shape~gps)
predict(fit)
mns <- predict(fit)
Y.hat <- predict(fit)
dim(shape)
gp.mns <- arrayspecs(Y.hat[c(1,11),],p=12,k=2)
dim(Y.hat)
Y.hat
Y.hat <- fit$fitted
Y.hat
gp.mns <- arrayspecs(Y.hat[c(1,11),],p=12,k=2)
mean <- mshape(shape)
plotRefToTarget(mean,gp.mns[,,1])
plotRefToTarget(mean,gp.mns[,,1], mag = 2)
plotRefToTarget(mean,gp.mns[,,2], mag = 2)
## Means from DFA
lda.fit <- lda(two.d.array(shape),gps)
## Means from DFA
##NOTE: first must remove redundant dimensions, or LDA is working with singular matrices
shape.pc <- prcomp(two.d.array(shape))$x
dim(shape.pc)
dim(two.d.array(shape))
Y.gpa <- gpagen(plethodon$land)
mean <- mshape(Y.gpa$coords)
## Overall means
fit <- procD.lm(Y.gpa$coords~plethodon$species)
Y.hat <- fit$fitted
gp.mns <- arrayspecs(Y.hat[c(1,11),],p=12,k=2)
plotRefToTarget(mean,gp.mns[,,1], mag = 2)
plotRefToTarget(mean,gp.mns[,,2], mag = 2)
lda.fit <- lda(two.d.array(Y.gpa$coords),plethodon$species)
## Means from DFA
##NOTE: first must remove redundant dimensions, or LDA is working with singular matrices
shape.pc <- prcomp(two.d.array(Y.gpa$coords))$x
lda.fit <- lda(shape.pc,plethodon$species)
## Means from DFA
##NOTE: first must remove redundant dimensions, or LDA is working with singular matrices
shape.pc <- prcomp(two.d.array(Y.gpa$coords))$x[,1:20] #remove GPA redundancies
lda.fit <- lda(shape.pc,plethodon$species)
lda.predict <- predict(lda.fit)
lda.predict
lda.scores <- predict(lda.fit)$x
lda.scores
tapply(lda.scores,plethodon$species, mean)
mn.score <- tapply(lda.scores,plethodon$species, mean)
pred.shape <- shape.predictor(Y.gpa$coords, x = lda.scores)
mn.ld.shape <- by(data = pred.shape,plethodon$species,FUN = mshape)
dim(pred.shape)
pred.shape
View(pred.shape)
pred.shape <- shape.predictor(Y.gpa$coords, x = mn.score[1])
mn.score
mn.score[1]
tapply(lda.scores,plethodon$species, mean)
tapply(lda.scores,plethodon$species, mean)[1]
pred.shape <- shape.predictor(Y.gpa$coords, x = lda.scores,
pred1 = tapply(lda.scores,plethodon$species, mean)[1],
pred2 = tapply(lda.scores,plethodon$species, mean)[1] )
pred.shape
plotRefToTarget(mean,pred.shape[,,1], mag = 2)
plotRefToTarget(mean,pred.shape$pred1, mag = 2)
par(mfrow = c(2,2))
plotRefToTarget(mean,gp.mns[,,1], mag = 2)
plotRefToTarget(mean,gp.mns[,,2], mag = 2)
plotRefToTarget(mean,pred.shape$pred1, mag = 2)
plotRefToTarget(mean,pred.shape$pred2, mag = 2)
par(mfrow = c(2,2))
plotRefToTarget(mean,gp.mns[,,1], mag = 2)
text("mean1")
mtext("mean1")
plotRefToTarget(mean,gp.mns[,,2], mag = 2)
mtext("mean2")
plotRefToTarget(mean,pred.shape$pred1, mag = 2)
mtext("DFmean1")
plotRefToTarget(mean,pred.shape$pred2, mag = 2)
mtext("DFmean2")
plotRefToTarget(mean,pred.shape$pred1, mag = 2)
mtext("DFmean1")
plotRefToTarget(mean,pred.shape$pred2, mag = 2)
mtext("DFmean2")
pred.shape <- shape.predictor(Y.gpa$coords, x = lda.scores,
pred1 = tapply(lda.scores,plethodon$species, mean)[1],
pred2 = tapply(lda.scores,plethodon$species, mean)[2] )
par(mfrow = c(1,1))
plotRefToTarget(mean,gp.mns[,,1], mag = 2)
mtext("mean1")
par(mfrow = c(2,2))
plotRefToTarget(mean,gp.mns[,,1], mag = 2)
mtext("mean1")
plotRefToTarget(mean,gp.mns[,,2], mag = 2)
mtext("mean2")
plotRefToTarget(mean,pred.shape$pred1, mag = 2)
mtext("DFmean1")
plotRefToTarget(mean,pred.shape$pred2, mag = 2)
mtext("DFmean2")
par(mfrow = c(2,2))
plotRefToTarget(mean,gp.mns[,,1], mag = 2,links = plethodon$links)
mtext("mean1")
plotRefToTarget(mean,gp.mns[,,2], mag = 2,links = plethodon$links)
mtext("mean2")
plotRefToTarget(mean,pred.shape$pred1, mag = 2,links = plethodon$links)
mtext("DFmean1")
plotRefToTarget(mean,pred.shape$pred2, mag = 2,links = plethodon$links)
mtext("DFmean2")
par(mfrow = c(1,1))
44/37
44/37
43/37
11/53
214.40-(122.25+65.55)
library(geomorph)
?compare.evol.rates
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
gp.end<-factor(c(0,0,1,0,0,1,1,0,0))  #endangered species vs. rest
names(gp.end)<-plethspecies$phy$tip
fit <- procD.pgls(Y.gpa$coords~gp.end, phy = plethspecies$phy)
ER<-compare.evol.rates(A=Y.gpa$coords, phy=plethspecies$phy,
method="simulation",gp=gp.end,iter=999)
summary(ER)
pw<-pairwise(fit,groups=gp.end, print.progress=F)
summary(pw, test.type="var", confidence=0.95, stat.table=F)
summary(ER)
0.003657677 / 1.79641730182344e-06
0.002906046 / 3.30041132572866e-06
install.packages("Matrix", repos = "http://R-Forge.R-project.org")
?geomorph:::morphol.disparity
devtools::install_github('geomorphR/geomorph', ref="Develop", build_vignettes = TRUE)
install.packages('processx')
install.packages("processx")
devtools::install_github('geomorphR/geomorph', ref="Develop", build_vignettes = TRUE)
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
devtools::install_github('geomorphR/geomorph', ref="Develop", build_vignettes = TRUE)
library(geomorph)
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)
gp.end<-factor(c(0,0,1,0,0,1,1,0,0))
names(gp.end)<-plethspecies$phy$tip
gdf <- geomorph.data.frame(Y.gpa, phy = plethspecies$phy, gp.end = gp.end)
pleth.pgls <- procD.pgls(coords ~ Csize * gp.end, phy = phy, data = gdf, iter = 999)
pw<-pairwise(pleth.pgls,groups=gdf$gp.end, print.progress=F)
summary(pwt, test.type="var", confidence=0.95, stat.table=F)
summary(pw, test.type="var", confidence=0.95, stat.table=F)
morphol.disparity(f1 = pleth.pgls, groups = ~ gp.end, data = gdf, iter = 999, print.progress = FALSE)
morphol.disparity(f1 = pleth.pgls, groups = ~ gp.end, transform = TRUE,
data = gdf, iter = 999, print.progress = FALSE)
summary(pw, test.type="var", confidence=0.95, stat.table=F)
?morphol.disparity
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
gp.end<-factor(c(0,0,1,0,0,1,1,0,0))  #endangered species vs. rest
names(gp.end)<-plethspecies$phy$tip
gdf <- geomorph.data.frame(Y.gpa, phy = plethspecies$phy,
gp.end = gp.end)
pleth.ols <- procD.lm(coords ~ Csize + gp.end,
data = gdf, iter = 999) # ordinary least squares
pleth.pgls <- procD.pgls(coords ~ Csize + gp.end, phy = phy,
data = gdf, iter = 999) # phylogenetic generalized least squares
summary(pleth.ols)
summary(pleth.pgls)
morphol.disparity(f1 = pleth.ols, groups = ~ gp.end, data = gdf,
iter = 999, print.progress = FALSE)
morphol.disparity(f1 = pleth.pgls, groups = ~ gp.end,
transform = FALSE, data = gdf,
iter = 999, print.progress = FALSE) # disparity in tangent space
morphol.disparity(f1 = pleth.pgls, groups = ~ gp.end,
transform = TRUE, data = gdf,
iter = 999, print.progress = FALSE) # disparity in transformed space
# Three plots that correspond to the three tests
PCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy)
pPCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy,
GLS = TRUE, transform = FALSE)
tpPCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy,
GLS = TRUE, transform = TRUE)
par(mfrow = c(1,3))
# Phylomorphospace
PC.plot <- plot(PCA, pch = 19, phylo = TRUE, main = "PCA-OLS")
shapeHulls(PC.plot, groups = gp.end)
# Phylo-PCA
pPC.plot <- plot(pPCA, pch = 19, phylo = TRUE, main = "pPCA - GLS, not transformed")
shapeHulls(pPC.plot, groups = gp.end)
# Transformed phylo-PCA
tpPC.plot <- plot(tpPCA, pch = 19, phylo = TRUE, main = "tpPCA - GLS, transformed")
shapeHulls(tpPC.plot, groups = gp.end)
par(mfrow = c(1,1))
### Variance using RRPP (not necessarily the same as disparity)
PW <- pairwise(pleth.ols, groups = gp.end)
summary(PW, test.type = 'var')
PW2 <- pairwise(pleth.pgls, groups = gp.end)
summary(PW2, test.type = 'var')
geomorph::news
geomorph::news()
news(package = "geomorph")
?phytools:::pgls.Ives
?nlme:::gls
fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
correlation = corAR1(form = ~ 1 | Mare))
fm1 <- nlme:::gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
correlation = corAR1(form = ~ 1 | Mare))
library(nlme)
fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
correlation = corAR1(form = ~ 1 | Mare))
fm1$varBeta
fm1$coefficients
fm1$sigma
install.packages(c("BiocManager", "broom", "callr", "castor", "caTools", "cpp11", "data.table", "dbplyr", "desc", "DescTools", "devtools", "diffobj", "dplyr", "DT", "e1071", "emmeans", "energy", "formatR", "gargle", "gert", "GGally", "ggforce", "ggraph", "ggsignif", "gh", "glmnet", "Gmedian", "grpreg", "haven", "hisse", "kableExtra", "labelled", "latex2exp", "lubridate", "magick", "maptools", "mathjaxr", "MatrixModels", "MCMCglmm", "mgcv", "mvabund", "mvMORPH", "mvSLOUCH", "ouch", "packrat", "pals", "parallelly", "parsedate", "pbkrtest", "pgirmess", "phangorn", "pkgload", "proxy", "quantreg", "ratematrix", "rcompanion", "RcppArmadillo", "RcppParallel", "RCurl", "remotes", "reprex", "rio", "rmarkdown", "Rmpfr", "rsconnect", "RSQLite", "rticles", "rvest", "Rvmmin", "segmented", "servr", "sf", "shapes", "SoundShape", "SparseM", "spatstat", "spatstat.data", "spatstat.utils", "spdep", "splancs", "stevetemplates", "styler", "svglite", "svUnit", "tidyr", "tidyverse", "tiff", "tinytex", "tweenr", "units", "viridis", "waldo", "XML", "zoo"))
119000/9
library(geomorph)
?gpagen
library(RRPP)
?lm.rrpp
library(geomorph)
?gm.prcomp
Y.gpa <- gpagen(plethspecies$land)    #GPA-alignment
###  Traditional PCA
PCA <- gm.prcomp(Y.gpa$coords)
summary(PCA)
plot(PCA, main = "PCA")
plot(PCA, main = "PCA", flip = 1) # flip the first axis
plot(PCA, main = "PCA", axis1 = 3, axis2 = 4)
Y.gpa <- gpagen(plethspecies$land)    #GPA-alignment
###  Traditional PCA
PCA <- gm.prcomp(Y.gpa$coords)
summary(PCA)
plot(PCA, main = "PCA")
plot(PCA, main = "PCA", flip = 1) # flip the first axis
plot(PCA, main = "PCA", axis1 = 2, axis2 = 3)
1700/20
*3
1700/20*3/5
setwd("C:/DeanData/Teaching/EEOB590_AdvBiostat/BioStats/LabData")
library(metafor)
library(RRPP)
mydata<-read.csv("Data/Lab-14-gur_hedge.csv",header=T)
View(mydata)
habitat<-mydata[,(1)]
effectd<-as.matrix(mydata[,(2)])
var<-as.matrix(mydata[,(4)])
#1: Fixed Effects m-a
#no structure
ma.no<-rma.uni(yi=effectd,vi=var,data=mydata,method="FE")
summary(ma.no)
forest(ma.no)  #plot of study effect sizes
#2: Fixed effects categorical m-a
ma.cat<-rma.uni(yi=effectd,vi=var,mods= ~habitat, data=mydata,method="FE")
summary(ma.cat)
#Group means
ma.cat$b[1] #lentic
ma.cat$b[1]+ma.cat$b[2] #marine
ma.cat$b[1]+ma.cat$b[3] #terrestrial
#4: Random Effects m-a
#no structure
rma.uni(yi=effectd,vi=var,data=mydata)
#2: Random effects categorical m-a
ma.catr<-rma.uni(yi=effectd,vi=var,mods= ~habitat, data=mydata)
summary(ma.catr)
## Some other analyses
#Funnel plot for outliers
funnel(ma.no)
# fail safe number
fsn(yi=effectd,vi=var,data=mydata)
fsn(yi=effectd,vi=var,data=mydata,type="Rosenberg")
diag(as.vector(var))
## meta-analysis as GLS
rdf <- rrpp.data.frame(effectd = effectd, habitat=habitat, var.e = diag(as.vector(var)))
anova(lm.rrpp(effectd~1,Cov = rdf$var.e, data = rdf, print.progress = FALSE))
summary(ma.no)  #same SS!
coef(lm.rrpp(effectd~1,Cov = rdf$var.e, data = rdf, print.progress = FALSE))
res<- lm.rrpp(effectd~habitat,Cov = rdf$var.e, data = rdf, print.progress = FALSE)
anova(res)
summary(ma.cat) #same Q tests!
res$LM$gls.coefficients #same group effect sizes
lm.rrpp(effectd~1,Cov = rdf$var.e,
data = rdf, print.progress = FALSE)$LM$gls.coefficients
anova(lm.rrpp(effectd~1,Cov = rdf$var.e, data = rdf, print.progress = FALSE))
lm.rrpp(effectd~1,Cov = rdf$var.e,
data = rdf, print.progress = FALSE)$LM$gls.coefficients
summary(ma.no)  #same SS!
